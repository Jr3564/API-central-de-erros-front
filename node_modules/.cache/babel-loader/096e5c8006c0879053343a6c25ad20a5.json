{"ast":null,"code":"const actionType = {\n  UPDATE_EVENTS: 'UPDATE_EVENTS',\n  UPDATE_LEVEL_COUNT: 'UPDATE_LEVEL_COUNT',\n  SORT_EVENTS: 'SORT_EVENTS',\n  FILTER_DATE: 'FILTER_DATE',\n  FILTER_LEVEL: 'FILTER_LEVEL',\n  FILTER_ORIGIN: 'FILTER_ORIGIN'\n};\n\nconst orderBy = (array, type) => array.sort((a, b) => {\n  if (a[type] > b[type]) return 1;\n  if (b[type] > a[type]) return -1;\n  return 0;\n});\n\nconst filterLevel = (state, action) => {\n  const {\n    filters\n  } = state;\n  const {\n    level\n  } = filters;\n  const newLevel = level.includes(action.payload) ? level.filter(element => element !== action.payload) : [...level, action.payload];\n  const newFilters = { ...filters,\n    level: newLevel\n  };\n  return { ...state,\n    filters: newFilters\n  };\n};\n\nfunction GlobalReducer(state, action) {\n  switch (action.type) {\n    case actionType.UPDATE_EVENTS:\n      return { ...state,\n        events: action.payload\n      };\n\n    case actionType.UPDATE_LEVEL_COUNT:\n      return { ...state,\n        countForLevel: { ...state.countForLevel,\n          ...action.payload\n        }\n      };\n\n    case actionType.SORT_EVENTS:\n      return { ...state,\n        events: orderBy(state.events, action.payload)\n      };\n\n    case actionType.FILTER_DATE:\n      return { ...state,\n        filters: { ...state.filters,\n          date: action.payload\n        }\n      };\n\n    case actionType.FILTER_LEVEL:\n      return filterLevel(state, action);\n\n    case actionType.FILTER_ORIGIN:\n      return { ...state,\n        filters: { ...state.filters,\n          origin: action.payload\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\n_c = GlobalReducer;\nexport { actionType, GlobalReducer };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalReducer\");","map":{"version":3,"sources":["/home/rodolfo/Documentos/Projects/API-central-de-erros-front/src/service/context/GlobalReducer.js"],"names":["actionType","UPDATE_EVENTS","UPDATE_LEVEL_COUNT","SORT_EVENTS","FILTER_DATE","FILTER_LEVEL","FILTER_ORIGIN","orderBy","array","type","sort","a","b","filterLevel","state","action","filters","level","newLevel","includes","payload","filter","element","newFilters","GlobalReducer","events","countForLevel","date","origin"],"mappings":"AAAA,MAAMA,UAAU,GAAG;AACjBC,EAAAA,aAAa,EAAE,eADE;AAEjBC,EAAAA,kBAAkB,EAAE,oBAFH;AAGjBC,EAAAA,WAAW,EAAE,aAHI;AAIjBC,EAAAA,WAAW,EAAE,aAJI;AAKjBC,EAAAA,YAAY,EAAE,cALG;AAMjBC,EAAAA,aAAa,EAAE;AANE,CAAnB;;AASA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiBD,KAAK,CAACE,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACpD,MAAID,CAAC,CAACF,IAAD,CAAD,GAAUG,CAAC,CAACH,IAAD,CAAf,EAAuB,OAAO,CAAP;AACvB,MAAIG,CAAC,CAACH,IAAD,CAAD,GAAUE,CAAC,CAACF,IAAD,CAAf,EAAuB,OAAO,CAAC,CAAR;AACvB,SAAO,CAAP;AACD,CAJgC,CAAjC;;AAMA,MAAMI,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAcF,KAApB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAYD,OAAlB;AACA,QAAME,QAAQ,GAAGD,KAAK,CAACE,QAAN,CAAeJ,MAAM,CAACK,OAAtB,IACbH,KAAK,CAACI,MAAN,CAAcC,OAAD,IAAaA,OAAO,KAAKP,MAAM,CAACK,OAA7C,CADa,GAEb,CAAC,GAAGH,KAAJ,EAAWF,MAAM,CAACK,OAAlB,CAFJ;AAGA,QAAMG,UAAU,GAAG,EAAE,GAAGP,OAAL;AAAcC,IAAAA,KAAK,EAAEC;AAArB,GAAnB;AAEA,SAAO,EAAE,GAAGJ,KAAL;AAAYE,IAAAA,OAAO,EAAEO;AAArB,GAAP;AACD,CATD;;AAWA,SAASC,aAAT,CAAuBV,KAAvB,EAA8BC,MAA9B,EAAsC;AACpC,UAAQA,MAAM,CAACN,IAAf;AACE,SAAKT,UAAU,CAACC,aAAhB;AACE,aAAO,EAAE,GAAGa,KAAL;AAAYW,QAAAA,MAAM,EAAEV,MAAM,CAACK;AAA3B,OAAP;;AACF,SAAKpB,UAAU,CAACE,kBAAhB;AACE,aAAO,EAAE,GAAGY,KAAL;AAAYY,QAAAA,aAAa,EAAE,EAAE,GAAGZ,KAAK,CAACY,aAAX;AAA0B,aAAGX,MAAM,CAACK;AAApC;AAA3B,OAAP;;AACF,SAAKpB,UAAU,CAACG,WAAhB;AACE,aAAO,EACL,GAAGW,KADE;AAELW,QAAAA,MAAM,EAAElB,OAAO,CAACO,KAAK,CAACW,MAAP,EAAeV,MAAM,CAACK,OAAtB;AAFV,OAAP;;AAIF,SAAKpB,UAAU,CAACI,WAAhB;AACE,aAAO,EAAE,GAAGU,KAAL;AAAYE,QAAAA,OAAO,EAAE,EAAE,GAAGF,KAAK,CAACE,OAAX;AAAoBW,UAAAA,IAAI,EAAEZ,MAAM,CAACK;AAAjC;AAArB,OAAP;;AACF,SAAKpB,UAAU,CAACK,YAAhB;AACE,aAAOQ,WAAW,CAACC,KAAD,EAAQC,MAAR,CAAlB;;AACF,SAAKf,UAAU,CAACM,aAAhB;AACE,aAAO,EAAE,GAAGQ,KAAL;AAAYE,QAAAA,OAAO,EAAE,EAAE,GAAGF,KAAK,CAACE,OAAX;AAAoBY,UAAAA,MAAM,EAAEb,MAAM,CAACK;AAAnC;AAArB,OAAP;;AACF;AACE,aAAON,KAAP;AAjBJ;AAmBD;;KApBQU,a;AAsBT,SAASxB,UAAT,EAAqBwB,aAArB","sourcesContent":["const actionType = {\n  UPDATE_EVENTS: 'UPDATE_EVENTS',\n  UPDATE_LEVEL_COUNT: 'UPDATE_LEVEL_COUNT',\n  SORT_EVENTS: 'SORT_EVENTS',\n  FILTER_DATE: 'FILTER_DATE',\n  FILTER_LEVEL: 'FILTER_LEVEL',\n  FILTER_ORIGIN: 'FILTER_ORIGIN',\n};\n\nconst orderBy = (array, type) => array.sort((a, b) => {\n  if (a[type] > b[type]) return 1;\n  if (b[type] > a[type]) return -1;\n  return 0;\n});\n\nconst filterLevel = (state, action) => {\n  const { filters } = state;\n  const { level } = filters;\n  const newLevel = level.includes(action.payload)\n    ? level.filter((element) => element !== action.payload)\n    : [...level, action.payload];\n  const newFilters = { ...filters, level: newLevel };\n\n  return { ...state, filters: newFilters };\n};\n\nfunction GlobalReducer(state, action) {\n  switch (action.type) {\n    case actionType.UPDATE_EVENTS:\n      return { ...state, events: action.payload };\n    case actionType.UPDATE_LEVEL_COUNT:\n      return { ...state, countForLevel: { ...state.countForLevel, ...action.payload } };\n    case actionType.SORT_EVENTS:\n      return {\n        ...state,\n        events: orderBy(state.events, action.payload),\n      };\n    case actionType.FILTER_DATE:\n      return { ...state, filters: { ...state.filters, date: action.payload } };\n    case actionType.FILTER_LEVEL:\n      return filterLevel(state, action);\n    case actionType.FILTER_ORIGIN:\n      return { ...state, filters: { ...state.filters, origin: action.payload } };\n    default:\n      return state;\n  }\n}\n\nexport { actionType, GlobalReducer };\n"]},"metadata":{},"sourceType":"module"}