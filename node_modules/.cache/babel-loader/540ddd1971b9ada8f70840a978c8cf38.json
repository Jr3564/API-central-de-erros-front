{"ast":null,"code":"import APIRouts from './APIRouts';\nimport fetchApi from './fetchApi';\nimport { actionType } from '../context';\nimport { localStorageP } from '../../utils';\n\nconst body = token => ({\n  headers: {\n    authorization: `Bearer ${token}`\n  }\n});\n\nexport default function updateScreenEvents(dispatch, order) {\n  const {\n    access_token: token\n  } = localStorageP.getStorage('token');\n  const URI = APIRouts.EVENTS_ORDERED(order);\n  fetchApi.get(URI, body(token)).then(({\n    data\n  }) => dispatch({\n    type: actionType.UPDATE_EVENTS,\n    payload: data.content\n  }));\n}","map":{"version":3,"sources":["/home/rodolfo/Documentos/Projects/API-central-de-erros-front/src/service/api/updateScreenEvents.js"],"names":["APIRouts","fetchApi","actionType","localStorageP","body","token","headers","authorization","updateScreenEvents","dispatch","order","access_token","getStorage","URI","EVENTS_ORDERED","get","then","data","type","UPDATE_EVENTS","payload","content"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,aAAT,QAA8B,aAA9B;;AAEA,MAAMC,IAAI,GAAIC,KAAD,KAAY;AACvBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,EAAG,UAASF,KAAM;AADxB;AADc,CAAZ,CAAb;;AAMA,eAAe,SAASG,kBAAT,CAA4BC,QAA5B,EAAsCC,KAAtC,EAA6C;AAC1D,QAAM;AAAEC,IAAAA,YAAY,EAAEN;AAAhB,MAA0BF,aAAa,CAACS,UAAd,CAAyB,OAAzB,CAAhC;AAEA,QAAMC,GAAG,GAAGb,QAAQ,CAACc,cAAT,CAAwBJ,KAAxB,CAAZ;AAEAT,EAAAA,QAAQ,CAACc,GAAT,CAAaF,GAAb,EAAkBT,IAAI,CAACC,KAAD,CAAtB,EACGW,IADH,CACQ,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAcR,QAAQ,CAAC;AAAES,IAAAA,IAAI,EAAEhB,UAAU,CAACiB,aAAnB;AAAkCC,IAAAA,OAAO,EAAEH,IAAI,CAACI;AAAhD,GAAD,CAD9B;AAED","sourcesContent":["import APIRouts from './APIRouts';\nimport fetchApi from './fetchApi';\nimport { actionType } from '../context';\nimport { localStorageP } from '../../utils';\n\nconst body = (token) => ({\n  headers: {\n    authorization: `Bearer ${token}`,\n  },\n});\n\nexport default function updateScreenEvents(dispatch, order) {\n  const { access_token: token } = localStorageP.getStorage('token');\n\n  const URI = APIRouts.EVENTS_ORDERED(order);\n\n  fetchApi.get(URI, body(token))\n    .then(({ data }) => dispatch({ type: actionType.UPDATE_EVENTS, payload: data.content }));\n}\n"]},"metadata":{},"sourceType":"module"}