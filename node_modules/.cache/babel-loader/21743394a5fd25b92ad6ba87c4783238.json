{"ast":null,"code":"import APIRouts from './APIRouts';\nimport fetchApi from './fetchApi';\nimport { actionType } from '../context';\nimport { localStorageP } from '../../utils';\nconst defaultLevels = ['error', 'warning', 'info'];\n\nconst body = token => ({\n  headers: {\n    authorization: `Bearer ${token}`\n  }\n});\n\nexport default function updateScreenCounts(dispatch, levels = defaultLevels) {\n  const {\n    access_token: token\n  } = localStorageP.getStorage('token');\n  const promiseByLevel = levels.map(level => fetchApi.get(APIRouts.EVENTS_LEVEL_COUNT_QUANTITY(level), body(token)).then(({\n    data\n  }) => ({\n    [level]: data\n  })));\n  Promise.allSettled(promiseByLevel).then(responses => {\n    responses.forEach(({\n      status,\n      value\n    }) => {\n      if (status === 'fulfilled') {\n        dispatch({\n          type: actionType.UPDATE_LEVEL_COUNT,\n          payload: value\n        });\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/home/rodolfo/Documentos/Projects/API-central-de-erros-front/src/service/api/updateScreenCounts.js"],"names":["APIRouts","fetchApi","actionType","localStorageP","defaultLevels","body","token","headers","authorization","updateScreenCounts","dispatch","levels","access_token","getStorage","promiseByLevel","map","level","get","EVENTS_LEVEL_COUNT_QUANTITY","then","data","Promise","allSettled","responses","forEach","status","value","type","UPDATE_LEVEL_COUNT","payload"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,aAAT,QAA8B,aAA9B;AAEA,MAAMC,aAAa,GAAG,CAAC,OAAD,EAAU,SAAV,EAAqB,MAArB,CAAtB;;AAEA,MAAMC,IAAI,GAAIC,KAAD,KAAY;AACvBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,EAAG,UAASF,KAAM;AADxB;AADc,CAAZ,CAAb;;AAMA,eAAe,SAASG,kBAAT,CAA4BC,QAA5B,EAAsCC,MAAM,GAAGP,aAA/C,EAA8D;AAC3E,QAAM;AAAEQ,IAAAA,YAAY,EAAEN;AAAhB,MAA0BH,aAAa,CAACU,UAAd,CAAyB,OAAzB,CAAhC;AAEA,QAAMC,cAAc,GAAGH,MAAM,CAC1BI,GADoB,CACfC,KAAD,IAAWf,QAAQ,CAACgB,GAAT,CAAajB,QAAQ,CAACkB,2BAAT,CAAqCF,KAArC,CAAb,EAA0DX,IAAI,CAACC,KAAD,CAA9D,EACba,IADa,CACR,CAAC;AAAEC,IAAAA;AAAF,GAAD,MAAe;AAAE,KAACJ,KAAD,GAASI;AAAX,GAAf,CADQ,CADK,CAAvB;AAIAC,EAAAA,OAAO,CAACC,UAAR,CAAmBR,cAAnB,EACGK,IADH,CACSI,SAAD,IAAe;AACnBA,IAAAA,SAAS,CAACC,OAAV,CAAkB,CAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,KAAuB;AACvC,UAAID,MAAM,KAAK,WAAf,EAA4B;AAC1Bf,QAAAA,QAAQ,CAAC;AAAEiB,UAAAA,IAAI,EAAEzB,UAAU,CAAC0B,kBAAnB;AAAuCC,UAAAA,OAAO,EAAEH;AAAhD,SAAD,CAAR;AACD;AACF,KAJD;AAKD,GAPH;AAQD","sourcesContent":["import APIRouts from './APIRouts';\nimport fetchApi from './fetchApi';\nimport { actionType } from '../context';\nimport { localStorageP } from '../../utils';\n\nconst defaultLevels = ['error', 'warning', 'info'];\n\nconst body = (token) => ({\n  headers: {\n    authorization: `Bearer ${token}`,\n  },\n});\n\nexport default function updateScreenCounts(dispatch, levels = defaultLevels) {\n  const { access_token: token } = localStorageP.getStorage('token');\n\n  const promiseByLevel = levels\n    .map((level) => fetchApi.get(APIRouts.EVENTS_LEVEL_COUNT_QUANTITY(level), body(token))\n      .then(({ data }) => ({ [level]: data })));\n\n  Promise.allSettled(promiseByLevel)\n    .then((responses) => {\n      responses.forEach(({ status, value }) => {\n        if (status === 'fulfilled') {\n          dispatch({ type: actionType.UPDATE_LEVEL_COUNT, payload: value });\n        }\n      });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}